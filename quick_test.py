#!/usr/bin/env python3
"""
Quick test ƒë·ªÉ ki·ªÉm tra main.py c√≥ ch·∫°y ƒë∆∞·ª£c kh√¥ng
"""

import sys
import subprocess

def test_import():
    """Test import c√°c module"""
    try:
        print("Testing imports...")
        import httpx
        import bs4
        import ebooklib
        import asyncio
        import tqdm
        import playwright
        import pytesseract
        import PIL
        import appdirs
        import configparser
        import os
        import gc
        import async_lru
        print("‚úÖ T·∫•t c·∫£ imports th√†nh c√¥ng")
        return True
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False

def test_syntax():
    """Test syntax c·ªßa main.py"""
    try:
        print("Testing main.py syntax...")
        result = subprocess.run([sys.executable, '-m', 'py_compile', 'main.py'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ main.py syntax OK")
            return True
        else:
            print(f"‚ùå Syntax error: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error testing syntax: {e}")
        return False

def test_basic_run():
    """Test ch·∫°y main.py v·ªõi timeout"""
    try:
        print("Testing basic run (5 seconds timeout)...")
        # Ch·∫°y v·ªõi timeout v√† input m·∫∑c ƒë·ªãnh
        result = subprocess.run([sys.executable, 'main.py'], 
                              input='n\n',  # Tho√°t ngay
                              timeout=5,
                              capture_output=True, 
                              text=True)
        print("‚úÖ main.py c√≥ th·ªÉ ch·∫°y")
        return True
    except subprocess.TimeoutExpired:
        print("‚úÖ main.py ch·∫°y ƒë∆∞·ª£c (timeout nh∆∞ mong ƒë·ª£i)")
        return True
    except Exception as e:
        print(f"‚ùå Error running main.py: {e}")
        return False

if __name__ == "__main__":
    print("=== Quick Test cho main.py ===\n")
    
    tests = [
        ("Import test", test_import),
        ("Syntax test", test_syntax),
        ("Basic run test", test_basic_run)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        if test_func():
            passed += 1
        print()
    
    print(f"=== K·∫øt qu·∫£: {passed}/{total} tests passed ===")
    
    if passed == total:
        print("üéâ T·∫•t c·∫£ tests ƒë·ªÅu pass! main.py s·∫µn s√†ng s·ª≠ d·ª•ng.")
    else:
        print("‚ö†Ô∏è  C√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c.")
