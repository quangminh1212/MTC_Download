#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
System Check Script for MeTruyenCV Web Interface
Ki·ªÉm tra h·ªá th·ªëng v√† dependencies
"""

import sys
import os
import platform
import subprocess
import importlib
import json
from pathlib import Path

def print_header():
    print("=" * 60)
    print("üîç MeTruyenCV Web Interface - System Check")
    print("=" * 60)

def print_section(title):
    print(f"\nüìã {title}")
    print("-" * 40)

def check_python():
    """Ki·ªÉm tra Python version"""
    print_section("Python Environment")
    
    version = sys.version_info
    print(f"‚úÖ Python Version: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå C·∫ßn Python 3.8 tr·ªü l√™n")
        return False
    
    print(f"‚úÖ Python executable: {sys.executable}")
    print(f"‚úÖ Platform: {platform.platform()}")
    print(f"‚úÖ Architecture: {platform.architecture()[0]}")
    
    return True

def check_virtual_env():
    """Ki·ªÉm tra virtual environment"""
    print_section("Virtual Environment")
    
    in_venv = hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)
    
    if in_venv:
        print("‚úÖ ƒêang ch·∫°y trong virtual environment")
        print(f"‚úÖ Virtual env path: {sys.prefix}")
    else:
        print("‚ö†Ô∏è  Kh√¥ng ch·∫°y trong virtual environment")
        print("üí° Khuy·∫øn ngh·ªã s·ª≠ d·ª•ng virtual environment")
    
    return True

def check_dependencies():
    """Ki·ªÉm tra dependencies"""
    print_section("Dependencies Check")
    
    # Main dependencies
    main_deps = [
        'selenium',
        'bs4',  # beautifulsoup4
        'lxml',
        'httpx',
        'ebooklib',
        'configparser'
    ]
    
    # Web dependencies
    web_deps = [
        'flask',
        'flask_socketio',
        'eventlet'
    ]
    
    all_deps = main_deps + web_deps
    missing_deps = []
    
    for dep in all_deps:
        try:
            importlib.import_module(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep} - MISSING")
            missing_deps.append(dep)
    
    if missing_deps:
        print(f"\n‚ùå Thi·∫øu {len(missing_deps)} dependencies:")
        for dep in missing_deps:
            print(f"   - {dep}")
        print("\nüí° Ch·∫°y: pip install -r requirements.txt && pip install -r requirements_web.txt")
        return False
    
    print(f"\n‚úÖ T·∫•t c·∫£ {len(all_deps)} dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
    return True

def check_files():
    """Ki·ªÉm tra files c·∫ßn thi·∫øt"""
    print_section("Required Files")
    
    required_files = [
        'app.py',
        'web_downloader.py',
        'config_manager.py',
        'logger.py',
        'main_config.py',
        'requirements.txt',
        'requirements_web.txt'
    ]
    
    required_dirs = [
        'templates',
        'static',
        'static/css',
        'static/js',
        'static/img'
    ]
    
    missing_files = []
    
    # Check files
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - MISSING")
            missing_files.append(file)
    
    # Check directories
    for dir in required_dirs:
        if os.path.exists(dir) and os.path.isdir(dir):
            print(f"‚úÖ {dir}/")
        else:
            print(f"‚ùå {dir}/ - MISSING")
            missing_files.append(dir)
    
    if missing_files:
        print(f"\n‚ùå Thi·∫øu {len(missing_files)} files/directories")
        return False
    
    return True

def check_config():
    """Ki·ªÉm tra config file"""
    print_section("Configuration")
    
    if os.path.exists('config.txt'):
        print("‚úÖ config.txt exists")
        
        try:
            from config_manager import ConfigManager
            config = ConfigManager()
            
            # Test config sections
            login_info = config.get_login_info()
            download_settings = config.get_download_settings()
            app_settings = config.get_app_settings()
            
            print("‚úÖ Config file is readable")
            print(f"‚úÖ Email configured: {'Yes' if login_info.get('email') else 'No'}")
            print(f"‚úÖ Download folder: {download_settings.get('drive')}:/{download_settings.get('folder')}")
            print(f"‚úÖ Headless mode: {app_settings.get('headless')}")
            
        except Exception as e:
            print(f"‚ùå Config file error: {str(e)}")
            return False
    else:
        print("‚ö†Ô∏è  config.txt not found")
        print("üí° S·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông khi ch·∫°y l·∫ßn ƒë·∫ßu")
    
    return True

def check_ports():
    """Ki·ªÉm tra ports"""
    print_section("Network Ports")
    
    import socket
    
    def is_port_open(port):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex(('localhost', port))
        sock.close()
        return result == 0
    
    # Check port 5000 (default Flask port)
    if is_port_open(5000):
        print("‚ö†Ô∏è  Port 5000 ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng")
        print("üí° Web server c√≥ th·ªÉ c·∫ßn port kh√°c")
    else:
        print("‚úÖ Port 5000 available")
    
    return True

def check_browser():
    """Ki·ªÉm tra browser cho Selenium"""
    print_section("Browser Support")
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        
        # Test Chrome
        try:
            chrome_options = Options()
            chrome_options.add_argument('--headless')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            
            driver = webdriver.Chrome(options=chrome_options)
            driver.quit()
            print("‚úÖ Chrome/Chromium available")
            return True
        except Exception as e:
            print(f"‚ùå Chrome/Chromium error: {str(e)}")
    
    except ImportError:
        print("‚ùå Selenium not installed")
    
    return False

def generate_report():
    """T·∫°o b√°o c√°o h·ªá th·ªëng"""
    print_section("System Report")
    
    report = {
        'timestamp': str(Path().resolve()),
        'python_version': f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        'platform': platform.platform(),
        'architecture': platform.architecture()[0],
        'working_directory': str(Path().resolve()),
        'virtual_env': hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)
    }
    
    try:
        with open('system_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        print("‚úÖ System report saved to system_report.json")
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not save report: {e}")

def main():
    """Main check function"""
    print_header()
    
    checks = [
        ("Python", check_python),
        ("Virtual Environment", check_virtual_env),
        ("Dependencies", check_dependencies),
        ("Files", check_files),
        ("Configuration", check_config),
        ("Network", check_ports),
        ("Browser", check_browser)
    ]
    
    results = []
    
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Error checking {name}: {e}")
            results.append((name, False))
    
    # Summary
    print_section("Summary")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print(f"üìä Checks passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ H·ªá th·ªëng s·∫µn s√†ng cho web interface!")
        print("üí° Ch·∫°y: python app.py ho·∫∑c ./run_web.bat")
    else:
        print("‚ö†Ô∏è  M·ªôt s·ªë v·∫•n ƒë·ªÅ c·∫ßn ƒë∆∞·ª£c kh·∫Øc ph·ª•c")
        print("üí° Ch·∫°y setup script ƒë·ªÉ t·ª± ƒë·ªông c√†i ƒë·∫∑t")
    
    # Generate report
    generate_report()
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
